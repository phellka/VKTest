
services:
  db:
    build: ./DB/demo
    restart: always
    ports:
      - "5435:${DB_PORT}"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdatademo:/var/lib/postgresql/data
    networks:
      - docker_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 5s
      
  rabbitmq:
    image: rabbitmq:3.10.7-management-alpine
    hostname: rabbitmq
    restart: always
    ports:
      - 15672:15672
      - ${RABBITMQ_PORT}:${RABBITMQ_PORT}
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS}
    volumes:
      - rabbitdatademo:/var/lib/rabbitmq/data
    networks:
      - docker_network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  backend:
    build: ./Backend      
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"   
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy          
    environment:
      DB_HOST: db         
      DB_PORT: ${DB_PORT}      
      DB_USER: ${POSTGRES_USER}  
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB} 
      PORT: ${BACKEND_PORT}       
      RabbitMQURL: "amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@rabbitmq:${RABBITMQ_PORT}/"
      PingLogsQueueName: ${PingLogsQueueName}
      ContainersRequestQueueName: ${ContainersRequestQueueName}
    networks:
      - docker_network   

  frontend:
    build:
      context: ./Frontend
    ports:
      - "80:80"
    environment:
      REACT_APP_BACKEND_URL: "http://backend:${BACKEND_PORT}" 
    depends_on:
      - backend
    networks:
      - docker_network
    
  pinger:
    build:
      context: ./pinger
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      BACKEND_URL: "http://backend:${BACKEND_PORT}"
      RabbitMQURL: "amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@rabbitmq:${RABBITMQ_PORT}/"
      PingLogsQueueName: ${PingLogsQueueName}
      ContainersRequestQueueName: ${ContainersRequestQueueName}

    networks:
      - docker_network

networks:
  docker_network:
    driver: bridge

volumes:
  pgdatademo:
  rabbitdatademo: